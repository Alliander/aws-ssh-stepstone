---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'SSH stepstone using IAM users'
Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'The VPC the EC2 instance is launched into.'
  CidrWhitelist:
    Type: 'String'
    Description: 'Cidr for whitelisting'
    Default: '0.0.0.0/0'
  SshPort:
    Type: 'Number'
    Description: 'SSH port'
    Default: '443'
  Subnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: 'The subnet the EC2 instance is launched into.'
  AmiId:
    Type: 'AWS::EC2::Image::Id'
    Description: 'Latest AWS Linux AMI. See https://aws.amazon.com/amazon-linux-ami/'
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ssh stepstone'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'ssh stepstone'
      SecurityGroupIngress:
      - CidrIp: !Ref CidrWhitelist
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref Role
  StepstoneRootGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      GroupName: !Sub "${AWS::StackName}-StepstoneRoot"
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: iamStepstone
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 'iam:ListUsers'
            Resource: '*'
          - Effect: Allow
            Action: 'iam:GetGroup'
            Resource: !GetAtt StepstoneRootGroup.Arn
          - Effect: Allow
            Action:
            - 'iam:ListSSHPublicKeys'
            - 'iam:GetSSHPublicKey'
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi

                SaveUserName="$1"
                SaveUserName=${SaveUserName//"+"/".plus."}
                SaveUserName=${SaveUserName//"="/".equal."}
                SaveUserName=${SaveUserName//","/".comma."}
                SaveUserName=${SaveUserName//"@"/".at."}

                aws iam list-ssh-public-keys --user-name "$SaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read KeyId; do
                  aws iam get-ssh-public-key --user-name "$SaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash
                
                source /opt/stack_vars
                
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if id -u "$SaveUserName" >/dev/null 2>&1; then
                    echo "$SaveUserName exists"
                  else
                    #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                    SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                    /usr/sbin/adduser "$SaveUserName"
                  fi
                done
                
                rm -Rf /etc/sudoers.d/*
                
                aws iam get-group --group-name $ROOTGROUP --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  
                  #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                  SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                  echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                  chmod 400 "/etc/sudoers.d/$SaveUserFileName"
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
            '/opt/stack_vars':
              content: !Sub |
                export ROOTGROUP=${AWS::StackName}-StepstoneRoot
              mode: '000755'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName}  --region=${AWS::Region}  --resource=Instance
                runas=root
          commands:
            a_configure_sshd_command:
              command: "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
            b_configure_sshd_commanduser:
              command: "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
            c_configure_sshd_port:
              command: !Sub "sed -i 's/#Port 22/Port ${SshPort}/g' /etc/ssh/sshd_config"
            d_configure_sshd_keepalive1:
              command: "sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 8/g' /etc/ssh/sshd_config"
            e_configure_sshd_keepalive2:
              command: "sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 5/g' /etc/ssh/sshd_config"
            f_update_packages:
              command: "yum update -y"
            g_update_packages:
              command: "yum install yum-cron-daily -y"
            h_update_packages:
              command: "sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/yum/yum-cron.conf"
            i_enable_yum_cron:
              command: "chkconfig yum-cron on"
            j_start_yum_cron:
              command: "service yum-cron start"
            z_import_users:
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              'cfn-hup':
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
    Properties:
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: 't2.micro'
      SecurityGroupIds:
      - !Ref SecurityGroup
      SubnetId: !Ref Subnet
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
          /opt/aws/bin/cfn-signal --exit-code=$? --stack=${AWS::StackName} --region=${AWS::Region}  --resource=Instance
      Tags:
      - Key: Name
        Value: 'SSH stepstone'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Instance
Outputs:
  PublicName:
    Description: 'The public name of the EC2 instance.'
    Value: !GetAtt 'Instance.PublicDnsName'
  Reference:
    Description: 'Special thanks to:'
    Value: 'https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/'
